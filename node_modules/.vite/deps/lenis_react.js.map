{
  "version": 3,
  "sources": ["../../@darkroom.engineering/tempus/src/index.js", "../../src/maths.ts", "../../src/animate.ts", "../../src/dimensions.ts", "../../src/debounce.ts", "../../src/emitter.ts", "../../src/virtual-scroll.ts", "../../src/index.ts", "../../src/index.tsx", "../../src/store.ts"],
  "sourcesContent": ["class Tempus {\r\n  constructor() {\r\n    this.callbacks = []\r\n    this.now = performance.now()\r\n    requestAnimationFrame(this.raf)\r\n  }\r\n\r\n  add(callback, priority = 0) {\r\n    this.callbacks.push({ callback, priority })\r\n    this.callbacks.sort((a, b) => a.priority - b.priority)\r\n\r\n    return () => this.remove(callback)\r\n  }\r\n\r\n  remove(callback) {\r\n    this.callbacks = this.callbacks.filter(({ callback: cb }) => callback !== cb)\r\n  }\r\n\r\n  raf = (now) => {\r\n    requestAnimationFrame(this.raf)\r\n\r\n    const deltaTime = now - this.now\r\n    this.now = now\r\n\r\n    for (let i = 0; i < this.callbacks.length; i++) {\r\n      this.callbacks[i].callback(now, deltaTime)\r\n    }\r\n  }\r\n}\r\n\r\nconst isClient = typeof window !== 'undefined'\r\n\r\nexport default isClient && new Tempus()\r\n", "/**\r\n * Clamp a value between a minimum and maximum value\r\n *\r\n * @param min Minimum value\r\n * @param input Value to clamp\r\n * @param max Maximum value\r\n * @returns Clamped value\r\n */\r\nexport function clamp(min: number, input: number, max: number) {\r\n  return Math.max(min, Math.min(input, max))\r\n}\r\n\r\n/**\r\n * Truncate a floating-point number to a specified number of decimal places\r\n *\r\n * @param value Value to truncate\r\n * @param decimals Number of decimal places to truncate to\r\n * @returns Truncated value\r\n */\r\nexport function truncate(value: number, decimals = 0) {\r\n  return parseFloat(value.toFixed(decimals))\r\n}\r\n\r\n/**\r\n *  Linearly interpolate between two values using an amount (0 <= t <= 1)\r\n *\r\n * @param x First value\r\n * @param y Second value\r\n * @param t Amount to interpolate (0 <= t <= 1)\r\n * @returns Interpolated value\r\n */\r\nexport function lerp(x: number, y: number, t: number) {\r\n  return (1 - t) * x + t * y\r\n}\r\n\r\n/**\r\n * Damp a value over time using a damping factor\r\n * {@link http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/}\r\n *\r\n * @param x Initial value\r\n * @param y Target value\r\n * @param lambda Damping factor\r\n * @param dt Time elapsed since the last update\r\n * @returns Damped value\r\n */\r\nexport function damp(x: number, y: number, lambda: number, deltaTime: number) {\r\n  return lerp(x, y, 1 - Math.exp(-lambda * deltaTime))\r\n}\r\n\r\n/**\r\n * Calculate the modulo of the dividend and divisor while keeping the result within the same sign as the divisor\r\n * {@link https://anguscroll.com/just/just-modulo}\r\n *\r\n * @param n Dividend\r\n * @param d Divisor\r\n * @returns Modulo\r\n */\r\nexport function modulo(n: number, d: number) {\r\n  return ((n % d) + d) % d\r\n}\r\n", "import { clamp, damp } from './maths'\r\nimport type { EasingFunction, FromToOptions, OnUpdateCallback } from './types'\r\n\r\n/**\r\n * Animate class to handle value animations with lerping or easing\r\n *\r\n * @example\r\n * const animate = new Animate()\r\n * animate.fromTo(0, 100, { duration: 1, easing: (t) => t })\r\n * animate.advance(0.5) // 50\r\n */\r\nexport class Animate {\r\n  isRunning = false\r\n  value = 0\r\n  from = 0\r\n  to = 0\r\n  currentTime = 0\r\n\r\n  // These are instanciated in the fromTo method\r\n  lerp?: number\r\n  duration?: number\r\n  easing?: EasingFunction\r\n  onUpdate?: OnUpdateCallback\r\n\r\n  /**\r\n   * Advance the animation by the given delta time\r\n   *\r\n   * @param deltaTime - The time in seconds to advance the animation\r\n   */\r\n  advance(deltaTime: number) {\r\n    if (!this.isRunning) return\r\n\r\n    let completed = false\r\n\r\n    if (this.duration && this.easing) {\r\n      this.currentTime += deltaTime\r\n      const linearProgress = clamp(0, this.currentTime / this.duration, 1)\r\n\r\n      completed = linearProgress >= 1\r\n      const easedProgress = completed ? 1 : this.easing(linearProgress)\r\n      this.value = this.from + (this.to - this.from) * easedProgress\r\n    } else if (this.lerp) {\r\n      this.value = damp(this.value, this.to, this.lerp * 60, deltaTime)\r\n      if (Math.round(this.value) === this.to) {\r\n        this.value = this.to\r\n        completed = true\r\n      }\r\n    } else {\r\n      // If no easing or lerp, just jump to the end value\r\n      this.value = this.to\r\n      completed = true\r\n    }\r\n\r\n    if (completed) {\r\n      this.stop()\r\n    }\r\n\r\n    // Call the onUpdate callback with the current value and completed status\r\n    this.onUpdate?.(this.value, completed)\r\n  }\r\n\r\n  /** Stop the animation */\r\n  stop() {\r\n    this.isRunning = false\r\n  }\r\n\r\n  /**\r\n   * Set up the animation from a starting value to an ending value\r\n   * with optional parameters for lerping, duration, easing, and onUpdate callback\r\n   *\r\n   * @param from - The starting value\r\n   * @param to - The ending value\r\n   * @param options - Options for the animation\r\n   */\r\n  fromTo(\r\n    from: number,\r\n    to: number,\r\n    { lerp, duration, easing, onStart, onUpdate }: FromToOptions\r\n  ) {\r\n    this.from = this.value = from\r\n    this.to = to\r\n    this.lerp = lerp\r\n    this.duration = duration\r\n    this.easing = easing\r\n    this.currentTime = 0\r\n    this.isRunning = true\r\n\r\n    onStart?.()\r\n    this.onUpdate = onUpdate\r\n  }\r\n}\r\n", "import { debounce } from './debounce'\r\n\r\n/**\r\n * Dimensions class to handle the size of the content and wrapper\r\n *\r\n * @example\r\n * const dimensions = new Dimensions(wrapper, content)\r\n * dimensions.on('resize', (e) => {\r\n *   console.log(e.width, e.height)\r\n * })\r\n */\r\nexport class Dimensions {\r\n  width = 0\r\n  height = 0\r\n  scrollHeight = 0\r\n  scrollWidth = 0\r\n\r\n  // These are instanciated in the constructor as they need information from the options\r\n  private debouncedResize?: (...args: unknown[]) => void\r\n  private wrapperResizeObserver?: ResizeObserver\r\n  private contentResizeObserver?: ResizeObserver\r\n\r\n  constructor(\r\n    private wrapper: HTMLElement | Window,\r\n    private content: HTMLElement,\r\n    { autoResize = true, debounce: debounceValue = 250 } = {}\r\n  ) {\r\n    if (autoResize) {\r\n      this.debouncedResize = debounce(this.resize, debounceValue)\r\n\r\n      if (this.wrapper instanceof Window) {\r\n        window.addEventListener('resize', this.debouncedResize, false)\r\n      } else {\r\n        this.wrapperResizeObserver = new ResizeObserver(this.debouncedResize)\r\n        this.wrapperResizeObserver.observe(this.wrapper)\r\n      }\r\n\r\n      this.contentResizeObserver = new ResizeObserver(this.debouncedResize)\r\n      this.contentResizeObserver.observe(this.content)\r\n    }\r\n\r\n    this.resize()\r\n  }\r\n\r\n  destroy() {\r\n    this.wrapperResizeObserver?.disconnect()\r\n    this.contentResizeObserver?.disconnect()\r\n\r\n    if (this.wrapper === window && this.debouncedResize) {\r\n      window.removeEventListener('resize', this.debouncedResize, false)\r\n    }\r\n  }\r\n\r\n  resize = () => {\r\n    this.onWrapperResize()\r\n    this.onContentResize()\r\n  }\r\n\r\n  onWrapperResize = () => {\r\n    if (this.wrapper instanceof Window) {\r\n      this.width = window.innerWidth\r\n      this.height = window.innerHeight\r\n    } else {\r\n      this.width = this.wrapper.clientWidth\r\n      this.height = this.wrapper.clientHeight\r\n    }\r\n  }\r\n\r\n  onContentResize = () => {\r\n    if (this.wrapper instanceof Window) {\r\n      this.scrollHeight = this.content.scrollHeight\r\n      this.scrollWidth = this.content.scrollWidth\r\n    } else {\r\n      this.scrollHeight = this.wrapper.scrollHeight\r\n      this.scrollWidth = this.wrapper.scrollWidth\r\n    }\r\n  }\r\n\r\n  get limit() {\r\n    return {\r\n      x: this.scrollWidth - this.width,\r\n      y: this.scrollHeight - this.height,\r\n    }\r\n  }\r\n}\r\n", "export function debounce<CB extends (...args: any[]) => void>(\r\n  callback: CB,\r\n  delay: number\r\n) {\r\n  let timer: number | undefined\r\n  return function <T>(this: T, ...args: Parameters<typeof callback>) {\r\n    let context = this\r\n    clearTimeout(timer)\r\n    timer = setTimeout(() => {\r\n      timer = undefined\r\n      callback.apply(context, args)\r\n    }, delay)\r\n  }\r\n}\r\n", "/**\r\n * Emitter class to handle events\r\n * @example\r\n * const emitter = new Emitter()\r\n * emitter.on('event', (data) => {\r\n *   console.log(data)\r\n * })\r\n * emitter.emit('event', 'data')\r\n */\r\nexport class Emitter {\r\n  private events: Record<\r\n    string,\r\n    Array<(...args: unknown[]) => void> | undefined\r\n  > = {}\r\n\r\n  /**\r\n   * Emit an event with the given data\r\n   * @param event Event name\r\n   * @param args Data to pass to the event handlers\r\n   */\r\n  emit(event: string, ...args: unknown[]) {\r\n    let callbacks = this.events[event] || []\r\n    for (let i = 0, length = callbacks.length; i < length; i++) {\r\n      callbacks[i]?.(...args)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a callback to the event\r\n   * @param event Event name\r\n   * @param cb Callback function\r\n   * @returns Unsubscribe function\r\n   */\r\n  on<CB extends (...args: any[]) => void>(event: string, cb: CB) {\r\n    // Add the callback to the event's callback list, or create a new list with the callback\r\n    this.events[event]?.push(cb) || (this.events[event] = [cb])\r\n\r\n    // Return an unsubscribe function\r\n    return () => {\r\n      this.events[event] = this.events[event]?.filter((i) => cb !== i)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a callback from the event\r\n   * @param event Event name\r\n   * @param callback Callback function\r\n   */\r\n  off<CB extends (...args: any[]) => void>(event: string, callback: CB) {\r\n    this.events[event] = this.events[event]?.filter((i) => callback !== i)\r\n  }\r\n\r\n  /**\r\n   * Remove all event listeners and clean up\r\n   */\r\n  destroy() {\r\n    this.events = {}\r\n  }\r\n}\r\n", "import { Emitter } from './emitter'\r\nimport { VirtualScrollCallback } from './types'\r\n\r\nconst LINE_HEIGHT = 100 / 6\r\nconst listenerOptions: AddEventListenerOptions = { passive: false }\r\n\r\nexport class VirtualScroll {\r\n  touchStart = {\r\n    x: 0,\r\n    y: 0,\r\n  }\r\n  lastDelta = {\r\n    x: 0,\r\n    y: 0,\r\n  }\r\n  window = {\r\n    width: 0,\r\n    height: 0,\r\n  }\r\n  private emitter = new Emitter()\r\n\r\n  constructor(\r\n    private element: HTMLElement,\r\n    private options = { wheelMultiplier: 1, touchMultiplier: 1 }\r\n  ) {\r\n    window.addEventListener('resize', this.onWindowResize, false)\r\n    this.onWindowResize()\r\n\r\n    this.element.addEventListener('wheel', this.onWheel, listenerOptions)\r\n    this.element.addEventListener(\r\n      'touchstart',\r\n      this.onTouchStart,\r\n      listenerOptions\r\n    )\r\n    this.element.addEventListener(\r\n      'touchmove',\r\n      this.onTouchMove,\r\n      listenerOptions\r\n    )\r\n    this.element.addEventListener('touchend', this.onTouchEnd, listenerOptions)\r\n  }\r\n\r\n  /**\r\n   * Add an event listener for the given event and callback\r\n   *\r\n   * @param event Event name\r\n   * @param callback Callback function\r\n   */\r\n  on(event: string, callback: VirtualScrollCallback) {\r\n    return this.emitter.on(event, callback)\r\n  }\r\n\r\n  /** Remove all event listeners and clean up */\r\n  destroy() {\r\n    this.emitter.destroy()\r\n\r\n    window.removeEventListener('resize', this.onWindowResize, false)\r\n\r\n    this.element.removeEventListener('wheel', this.onWheel, listenerOptions)\r\n    this.element.removeEventListener(\r\n      'touchstart',\r\n      this.onTouchStart,\r\n      listenerOptions\r\n    )\r\n    this.element.removeEventListener(\r\n      'touchmove',\r\n      this.onTouchMove,\r\n      listenerOptions\r\n    )\r\n    this.element.removeEventListener(\r\n      'touchend',\r\n      this.onTouchEnd,\r\n      listenerOptions\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Event handler for 'touchstart' event\r\n   *\r\n   * @param event Touch event\r\n   */\r\n  onTouchStart = (event: TouchEvent) => {\r\n    // @ts-expect-error - event.targetTouches is not defined\r\n    const { clientX, clientY } = event.targetTouches\r\n      ? event.targetTouches[0]\r\n      : event\r\n\r\n    this.touchStart.x = clientX\r\n    this.touchStart.y = clientY\r\n\r\n    this.lastDelta = {\r\n      x: 0,\r\n      y: 0,\r\n    }\r\n\r\n    this.emitter.emit('scroll', {\r\n      deltaX: 0,\r\n      deltaY: 0,\r\n      event,\r\n    })\r\n  }\r\n\r\n  /** Event handler for 'touchmove' event */\r\n  onTouchMove = (event: TouchEvent) => {\r\n    // @ts-expect-error - event.targetTouches is not defined\r\n    const { clientX, clientY } = event.targetTouches\r\n      ? event.targetTouches[0]\r\n      : event\r\n\r\n    const deltaX = -(clientX - this.touchStart.x) * this.options.touchMultiplier\r\n    const deltaY = -(clientY - this.touchStart.y) * this.options.touchMultiplier\r\n\r\n    this.touchStart.x = clientX\r\n    this.touchStart.y = clientY\r\n\r\n    this.lastDelta = {\r\n      x: deltaX,\r\n      y: deltaY,\r\n    }\r\n\r\n    this.emitter.emit('scroll', {\r\n      deltaX,\r\n      deltaY,\r\n      event,\r\n    })\r\n  }\r\n\r\n  onTouchEnd = (event: TouchEvent) => {\r\n    this.emitter.emit('scroll', {\r\n      deltaX: this.lastDelta.x,\r\n      deltaY: this.lastDelta.y,\r\n      event,\r\n    })\r\n  }\r\n\r\n  /** Event handler for 'wheel' event */\r\n  onWheel = (event: WheelEvent) => {\r\n    let { deltaX, deltaY, deltaMode } = event\r\n\r\n    const multiplierX =\r\n      deltaMode === 1 ? LINE_HEIGHT : deltaMode === 2 ? this.window.width : 1\r\n    const multiplierY =\r\n      deltaMode === 1 ? LINE_HEIGHT : deltaMode === 2 ? this.window.height : 1\r\n\r\n    deltaX *= multiplierX\r\n    deltaY *= multiplierY\r\n\r\n    deltaX *= this.options.wheelMultiplier\r\n    deltaY *= this.options.wheelMultiplier\r\n\r\n    this.emitter.emit('scroll', { deltaX, deltaY, event })\r\n  }\r\n\r\n  onWindowResize = () => {\r\n    this.window = {\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n    }\r\n  }\r\n}\r\n", "import { version } from '../../../package.json'\r\nimport { Animate } from './animate'\r\nimport { Dimensions } from './dimensions'\r\nimport { Emitter } from './emitter'\r\nimport { clamp, modulo } from './maths'\r\nimport type {\r\n  LenisEvent,\r\n  LenisOptions,\r\n  ScrollCallback,\r\n  Scrolling,\r\n  ScrollToOptions,\r\n  UserData,\r\n  VirtualScrollCallback,\r\n  VirtualScrollData,\r\n} from './types'\r\nimport { VirtualScroll } from './virtual-scroll'\r\n\r\n// Types\r\nexport * from './types'\r\n\r\n// Technical explanation\r\n// - listen to 'wheel' events\r\n// - prevent 'wheel' event to prevent scroll\r\n// - normalize wheel delta\r\n// - add delta to targetScroll\r\n// - animate scroll to targetScroll (smooth context)\r\n// - if animation is not running, listen to 'scroll' events (native context)\r\n\r\ntype OptionalPick<T, F extends keyof T> = Omit<T, F> & Partial<Pick<T, F>>\r\n\r\nexport default class Lenis {\r\n  private _isScrolling: Scrolling = false // true when scroll is animating\r\n  private _isStopped = false // true if user should not be able to scroll - enable/disable programmatically\r\n  private _isLocked = false // same as isStopped but enabled/disabled when scroll reaches target\r\n  private _preventNextNativeScrollEvent = false\r\n  private _resetVelocityTimeout: number | null = null\r\n\r\n  /**\r\n   * Whether or not the user is touching the screen\r\n   */\r\n  isTouching?: boolean\r\n  /**\r\n   * The time in ms since the lenis instance was created\r\n   */\r\n  time = 0\r\n  /**\r\n   * User data that will be forwarded through the scroll event\r\n   *\r\n   * @example\r\n   * lenis.scrollTo(100, {\r\n   *   userData: {\r\n   *     foo: 'bar'\r\n   *   }\r\n   * })\r\n   */\r\n  userData: UserData = {}\r\n  /**\r\n   * The last velocity of the scroll\r\n   */\r\n  lastVelocity = 0\r\n  /**\r\n   * The current velocity of the scroll\r\n   */\r\n  velocity = 0\r\n  /**\r\n   * The direction of the scroll\r\n   */\r\n  direction: 1 | -1 | 0 = 0\r\n  /**\r\n   * The options passed to the lenis instance\r\n   */\r\n  options: OptionalPick<\r\n    Required<LenisOptions>,\r\n    'duration' | 'prevent' | 'virtualScroll'\r\n  >\r\n  /**\r\n   * The target scroll value\r\n   */\r\n  targetScroll: number\r\n  /**\r\n   * The animated scroll value\r\n   */\r\n  animatedScroll: number\r\n\r\n  // These are instanciated here as they don't need information from the options\r\n  private readonly animate = new Animate()\r\n  private readonly emitter = new Emitter()\r\n  // These are instanciated in the constructor as they need information from the options\r\n  readonly dimensions: Dimensions // This is not private because it's used in the Snap class\r\n  private readonly virtualScroll: VirtualScroll\r\n\r\n  constructor({\r\n    wrapper = window,\r\n    content = document.documentElement,\r\n    eventsTarget = wrapper,\r\n    smoothWheel = true,\r\n    syncTouch = false,\r\n    syncTouchLerp = 0.075,\r\n    touchInertiaMultiplier = 35,\r\n    duration, // in seconds\r\n    easing = (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),\r\n    lerp = 0.1,\r\n    infinite = false,\r\n    orientation = 'vertical', // vertical, horizontal\r\n    gestureOrientation = 'vertical', // vertical, horizontal, both\r\n    touchMultiplier = 1,\r\n    wheelMultiplier = 1,\r\n    autoResize = true,\r\n    prevent,\r\n    virtualScroll,\r\n    __experimental__naiveDimensions = false,\r\n  }: LenisOptions = {}) {\r\n    // Set version\r\n    window.lenisVersion = version\r\n\r\n    // Check if wrapper is html or body, fallback to window\r\n    if (\r\n      !wrapper ||\r\n      wrapper === document.documentElement ||\r\n      wrapper === document.body\r\n    ) {\r\n      wrapper = window\r\n    }\r\n\r\n    // Setup options\r\n    this.options = {\r\n      wrapper,\r\n      content,\r\n      eventsTarget,\r\n      smoothWheel,\r\n      syncTouch,\r\n      syncTouchLerp,\r\n      touchInertiaMultiplier,\r\n      duration,\r\n      easing,\r\n      lerp,\r\n      infinite,\r\n      gestureOrientation,\r\n      orientation,\r\n      touchMultiplier,\r\n      wheelMultiplier,\r\n      autoResize,\r\n      prevent,\r\n      virtualScroll,\r\n      __experimental__naiveDimensions,\r\n    }\r\n\r\n    // Setup dimensions instance\r\n    this.dimensions = new Dimensions(wrapper, content, { autoResize })\r\n\r\n    // Setup class name\r\n    this.updateClassName()\r\n\r\n    // Set the initial scroll value for all scroll information\r\n    this.targetScroll = this.animatedScroll = this.actualScroll\r\n\r\n    // Add event listeners\r\n    this.options.wrapper.addEventListener('scroll', this.onNativeScroll, false)\r\n\r\n    this.options.wrapper.addEventListener(\r\n      'pointerdown',\r\n      this.onPointerDown as EventListener,\r\n      false\r\n    )\r\n\r\n    // Setup virtual scroll instance\r\n    this.virtualScroll = new VirtualScroll(eventsTarget as HTMLElement, {\r\n      touchMultiplier,\r\n      wheelMultiplier,\r\n    })\r\n    this.virtualScroll.on('scroll', this.onVirtualScroll)\r\n  }\r\n\r\n  /**\r\n   * Destroy the lenis instance, remove all event listeners and clean up the class name\r\n   */\r\n  destroy() {\r\n    this.emitter.destroy()\r\n\r\n    this.options.wrapper.removeEventListener(\r\n      'scroll',\r\n      this.onNativeScroll,\r\n      false\r\n    )\r\n    this.options.wrapper.removeEventListener(\r\n      'pointerdown',\r\n      this.onPointerDown as EventListener,\r\n      false\r\n    )\r\n\r\n    this.virtualScroll.destroy()\r\n    this.dimensions.destroy()\r\n\r\n    this.cleanUpClassName()\r\n  }\r\n\r\n  /**\r\n   * Add an event listener for the given event and callback\r\n   *\r\n   * @param event Event name\r\n   * @param callback Callback function\r\n   * @returns Unsubscribe function\r\n   */\r\n  on(event: 'scroll', callback: ScrollCallback): () => void\r\n  on(event: 'virtual-scroll', callback: VirtualScrollCallback): () => void\r\n  on(event: LenisEvent, callback: any) {\r\n    return this.emitter.on(event, callback)\r\n  }\r\n\r\n  /**\r\n   * Remove an event listener for the given event and callback\r\n   *\r\n   * @param event Event name\r\n   * @param callback Callback function\r\n   */\r\n  off(event: 'scroll', callback: ScrollCallback): void\r\n  off(event: 'virtual-scroll', callback: VirtualScrollCallback): void\r\n  off(event: LenisEvent, callback: any) {\r\n    return this.emitter.off(event, callback)\r\n  }\r\n\r\n  private setScroll(scroll: number) {\r\n    // apply scroll value immediately\r\n    if (this.isHorizontal) {\r\n      this.rootElement.scrollLeft = scroll\r\n    } else {\r\n      this.rootElement.scrollTop = scroll\r\n    }\r\n  }\r\n\r\n  private onPointerDown = (event: PointerEvent | MouseEvent) => {\r\n    if (event.button === 1) {\r\n      this.reset()\r\n    }\r\n  }\r\n\r\n  private onVirtualScroll = (data: VirtualScrollData) => {\r\n    if (\r\n      typeof this.options.virtualScroll === 'function' &&\r\n      this.options.virtualScroll(data) === false\r\n    )\r\n      return\r\n\r\n    const { deltaX, deltaY, event } = data\r\n\r\n    this.emitter.emit('virtual-scroll', { deltaX, deltaY, event })\r\n\r\n    // keep zoom feature\r\n    if (event.ctrlKey) return\r\n\r\n    const isTouch = event.type.includes('touch')\r\n    const isWheel = event.type.includes('wheel')\r\n\r\n    this.isTouching = event.type === 'touchstart' || event.type === 'touchmove'\r\n    // if (event.type === 'touchend') {\r\n    //   console.log('touchend', this.scroll)\r\n    //   // this.lastVelocity = this.velocity\r\n    //   // this.velocity = 0\r\n    //   // this.isScrolling = false\r\n    //   this.emit({ type: 'touchend' })\r\n    //   // alert('touchend')\r\n    //   return\r\n    // }\r\n\r\n    const isTapToStop =\r\n      this.options.syncTouch &&\r\n      isTouch &&\r\n      event.type === 'touchstart' &&\r\n      !this.isStopped &&\r\n      !this.isLocked\r\n\r\n    if (isTapToStop) {\r\n      this.reset()\r\n      return\r\n    }\r\n\r\n    const isClick = deltaX === 0 && deltaY === 0 // click event\r\n\r\n    // const isPullToRefresh =\r\n    //   this.options.gestureOrientation === 'vertical' &&\r\n    //   this.scroll === 0 &&\r\n    //   !this.options.infinite &&\r\n    //   deltaY <= 5 // touch pull to refresh, not reliable yet\r\n\r\n    const isUnknownGesture =\r\n      (this.options.gestureOrientation === 'vertical' && deltaY === 0) ||\r\n      (this.options.gestureOrientation === 'horizontal' && deltaX === 0)\r\n\r\n    if (isClick || isUnknownGesture) {\r\n      // console.log('prevent')\r\n      return\r\n    }\r\n\r\n    // catch if scrolling on nested scroll elements\r\n    let composedPath = event.composedPath()\r\n    composedPath = composedPath.slice(0, composedPath.indexOf(this.rootElement)) // remove parents elements\r\n\r\n    const prevent = this.options.prevent\r\n\r\n    if (\r\n      !!composedPath.find(\r\n        (node) =>\r\n          node instanceof HTMLElement &&\r\n          ((typeof prevent === 'function' && prevent?.(node)) ||\r\n            node.hasAttribute?.('data-lenis-prevent') ||\r\n            (isTouch && node.hasAttribute?.('data-lenis-prevent-touch')) ||\r\n            (isWheel && node.hasAttribute?.('data-lenis-prevent-wheel')) ||\r\n            (node.classList?.contains('lenis') &&\r\n              !node.classList?.contains('lenis-stopped'))) // nested lenis instance\r\n      )\r\n    )\r\n      return\r\n\r\n    if (this.isStopped || this.isLocked) {\r\n      event.preventDefault() // this will stop forwarding the event to the parent, this is problematic\r\n      return\r\n    }\r\n\r\n    const isSmooth =\r\n      (this.options.syncTouch && isTouch) ||\r\n      (this.options.smoothWheel && isWheel)\r\n\r\n    if (!isSmooth) {\r\n      this.isScrolling = 'native'\r\n      this.animate.stop()\r\n      return\r\n    }\r\n\r\n    event.preventDefault()\r\n\r\n    let delta = deltaY\r\n    if (this.options.gestureOrientation === 'both') {\r\n      delta = Math.abs(deltaY) > Math.abs(deltaX) ? deltaY : deltaX\r\n    } else if (this.options.gestureOrientation === 'horizontal') {\r\n      delta = deltaX\r\n    }\r\n\r\n    const syncTouch = isTouch && this.options.syncTouch\r\n    const isTouchEnd = isTouch && event.type === 'touchend'\r\n\r\n    const hasTouchInertia = isTouchEnd && Math.abs(delta) > 5\r\n\r\n    if (hasTouchInertia) {\r\n      delta = this.velocity * this.options.touchInertiaMultiplier\r\n    }\r\n\r\n    this.scrollTo(this.targetScroll + delta, {\r\n      programmatic: false,\r\n      ...(syncTouch\r\n        ? {\r\n            lerp: hasTouchInertia ? this.options.syncTouchLerp : 1,\r\n          }\r\n        : {\r\n            lerp: this.options.lerp,\r\n            duration: this.options.duration,\r\n            easing: this.options.easing,\r\n          }),\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Force lenis to recalculate the dimensions\r\n   */\r\n  resize() {\r\n    this.dimensions.resize()\r\n    this.animatedScroll = this.targetScroll = this.actualScroll\r\n    this.emit()\r\n  }\r\n\r\n  private emit() {\r\n    this.emitter.emit('scroll', this)\r\n  }\r\n\r\n  private onNativeScroll = () => {\r\n    if (this._resetVelocityTimeout !== null) {\r\n      clearTimeout(this._resetVelocityTimeout)\r\n      this._resetVelocityTimeout = null\r\n    }\r\n\r\n    if (this._preventNextNativeScrollEvent) {\r\n      this._preventNextNativeScrollEvent = false\r\n      return\r\n    }\r\n\r\n    if (this.isScrolling === false || this.isScrolling === 'native') {\r\n      const lastScroll = this.animatedScroll\r\n      this.animatedScroll = this.targetScroll = this.actualScroll\r\n      this.lastVelocity = this.velocity\r\n      this.velocity = this.animatedScroll - lastScroll\r\n      this.direction = Math.sign(\r\n        this.animatedScroll - lastScroll\r\n      ) as Lenis['direction']\r\n      this.isScrolling = 'native'\r\n      this.emit()\r\n\r\n      if (this.velocity !== 0) {\r\n        this._resetVelocityTimeout = setTimeout(() => {\r\n          this.lastVelocity = this.velocity\r\n          this.velocity = 0\r\n          this.isScrolling = false\r\n          this.emit()\r\n        }, 400)\r\n      }\r\n    }\r\n  }\r\n\r\n  private reset() {\r\n    this.isLocked = false\r\n    this.isScrolling = false\r\n    this.animatedScroll = this.targetScroll = this.actualScroll\r\n    this.lastVelocity = this.velocity = 0\r\n    this.animate.stop()\r\n  }\r\n\r\n  /**\r\n   * Start lenis scroll after it has been stopped\r\n   */\r\n  start() {\r\n    if (!this.isStopped) return\r\n    this.isStopped = false\r\n\r\n    this.reset()\r\n  }\r\n\r\n  /**\r\n   * Stop lenis scroll\r\n   */\r\n  stop() {\r\n    if (this.isStopped) return\r\n    this.isStopped = true\r\n    this.animate.stop()\r\n\r\n    this.reset()\r\n  }\r\n\r\n  /**\r\n   * RequestAnimationFrame for lenis\r\n   *\r\n   * @param time The time in ms from an external clock like `requestAnimationFrame` or Tempus\r\n   */\r\n  raf(time: number) {\r\n    const deltaTime = time - (this.time || time)\r\n    this.time = time\r\n\r\n    this.animate.advance(deltaTime * 0.001)\r\n  }\r\n\r\n  /**\r\n   * Scroll to a target value\r\n   *\r\n   * @param target The target value to scroll to\r\n   * @param options The options for the scroll\r\n   *\r\n   * @example\r\n   * lenis.scrollTo(100, {\r\n   *   offset: 100,\r\n   *   duration: 1,\r\n   *   easing: (t) => 1 - Math.cos((t * Math.PI) / 2),\r\n   *   lerp: 0.1,\r\n   *   onStart: () => {\r\n   *     console.log('onStart')\r\n   *   },\r\n   *   onComplete: () => {\r\n   *     console.log('onComplete')\r\n   *   },\r\n   * })\r\n   */\r\n  scrollTo(\r\n    target: number | string | HTMLElement,\r\n    {\r\n      offset = 0,\r\n      immediate = false,\r\n      lock = false,\r\n      duration = this.options.duration,\r\n      easing = this.options.easing,\r\n      lerp = this.options.lerp,\r\n      onStart,\r\n      onComplete,\r\n      force = false, // scroll even if stopped\r\n      programmatic = true, // called from outside of the class\r\n      userData,\r\n    }: ScrollToOptions = {}\r\n  ) {\r\n    if ((this.isStopped || this.isLocked) && !force) return\r\n\r\n    // keywords\r\n    if (\r\n      typeof target === 'string' &&\r\n      ['top', 'left', 'start'].includes(target)\r\n    ) {\r\n      target = 0\r\n    } else if (\r\n      typeof target === 'string' &&\r\n      ['bottom', 'right', 'end'].includes(target)\r\n    ) {\r\n      target = this.limit\r\n    } else {\r\n      let node\r\n\r\n      if (typeof target === 'string') {\r\n        // CSS selector\r\n        node = document.querySelector(target)\r\n      } else if (target instanceof HTMLElement && target?.nodeType) {\r\n        // Node element\r\n        node = target\r\n      }\r\n\r\n      if (node) {\r\n        if (this.options.wrapper !== window) {\r\n          // nested scroll offset correction\r\n          const wrapperRect = this.rootElement.getBoundingClientRect()\r\n          offset -= this.isHorizontal ? wrapperRect.left : wrapperRect.top\r\n        }\r\n\r\n        const rect = node.getBoundingClientRect()\r\n\r\n        target =\r\n          (this.isHorizontal ? rect.left : rect.top) + this.animatedScroll\r\n      }\r\n    }\r\n\r\n    if (typeof target !== 'number') return\r\n\r\n    target += offset\r\n    target = Math.round(target)\r\n\r\n    if (this.options.infinite) {\r\n      if (programmatic) {\r\n        this.targetScroll = this.animatedScroll = this.scroll\r\n      }\r\n    } else {\r\n      target = clamp(0, target, this.limit)\r\n    }\r\n\r\n    if (target === this.targetScroll) {\r\n      onStart?.(this)\r\n      onComplete?.(this)\r\n      return\r\n    }\r\n\r\n    this.userData = userData ?? {}\r\n\r\n    if (immediate) {\r\n      this.animatedScroll = this.targetScroll = target\r\n      this.setScroll(this.scroll)\r\n      this.reset()\r\n      this.preventNextNativeScrollEvent()\r\n      this.emit()\r\n      onComplete?.(this)\r\n      this.userData = {}\r\n      return\r\n    }\r\n\r\n    if (!programmatic) {\r\n      this.targetScroll = target\r\n    }\r\n\r\n    this.animate.fromTo(this.animatedScroll, target, {\r\n      duration,\r\n      easing,\r\n      lerp,\r\n      onStart: () => {\r\n        // started\r\n        if (lock) this.isLocked = true\r\n        this.isScrolling = 'smooth'\r\n        onStart?.(this)\r\n      },\r\n      onUpdate: (value: number, completed: boolean) => {\r\n        this.isScrolling = 'smooth'\r\n\r\n        // updated\r\n        this.lastVelocity = this.velocity\r\n        this.velocity = value - this.animatedScroll\r\n        this.direction = Math.sign(this.velocity) as Lenis['direction']\r\n\r\n        this.animatedScroll = value\r\n        this.setScroll(this.scroll)\r\n\r\n        if (programmatic) {\r\n          // wheel during programmatic should stop it\r\n          this.targetScroll = value\r\n        }\r\n\r\n        if (!completed) this.emit()\r\n\r\n        if (completed) {\r\n          this.reset()\r\n          this.emit()\r\n          onComplete?.(this)\r\n          this.userData = {}\r\n          // avoid emitting event twice\r\n          this.preventNextNativeScrollEvent()\r\n        }\r\n      },\r\n    })\r\n  }\r\n\r\n  private preventNextNativeScrollEvent() {\r\n    this._preventNextNativeScrollEvent = true\r\n\r\n    requestAnimationFrame(() => {\r\n      this._preventNextNativeScrollEvent = false\r\n    })\r\n  }\r\n\r\n  /**\r\n   * The root element on which lenis is instanced\r\n   */\r\n  get rootElement() {\r\n    return (\r\n      this.options.wrapper === window\r\n        ? document.documentElement\r\n        : this.options.wrapper\r\n    ) as HTMLElement\r\n  }\r\n\r\n  /**\r\n   * The limit which is the maximum scroll value\r\n   */\r\n  get limit() {\r\n    if (this.options.__experimental__naiveDimensions) {\r\n      if (this.isHorizontal) {\r\n        return this.rootElement.scrollWidth - this.rootElement.clientWidth\r\n      } else {\r\n        return this.rootElement.scrollHeight - this.rootElement.clientHeight\r\n      }\r\n    } else {\r\n      return this.dimensions.limit[this.isHorizontal ? 'x' : 'y']\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether or not the scroll is horizontal\r\n   */\r\n  get isHorizontal() {\r\n    return this.options.orientation === 'horizontal'\r\n  }\r\n\r\n  /**\r\n   * The actual scroll value\r\n   */\r\n  get actualScroll() {\r\n    // value browser takes into account\r\n    return this.isHorizontal\r\n      ? this.rootElement.scrollLeft\r\n      : this.rootElement.scrollTop\r\n  }\r\n\r\n  /**\r\n   * The current scroll value\r\n   */\r\n  get scroll() {\r\n    return this.options.infinite\r\n      ? modulo(this.animatedScroll, this.limit)\r\n      : this.animatedScroll\r\n  }\r\n\r\n  /**\r\n   * The progress of the scroll relative to the limit\r\n   */\r\n  get progress() {\r\n    // avoid progress to be NaN\r\n    return this.limit === 0 ? 1 : this.scroll / this.limit\r\n  }\r\n\r\n  /**\r\n   * Current scroll state\r\n   */\r\n  get isScrolling() {\r\n    return this._isScrolling\r\n  }\r\n\r\n  private set isScrolling(value: Scrolling) {\r\n    if (this._isScrolling !== value) {\r\n      this._isScrolling = value\r\n      this.updateClassName()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if lenis is stopped\r\n   */\r\n  get isStopped() {\r\n    return this._isStopped\r\n  }\r\n\r\n  private set isStopped(value: boolean) {\r\n    if (this._isStopped !== value) {\r\n      this._isStopped = value\r\n      this.updateClassName()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if lenis is locked\r\n   */\r\n  get isLocked() {\r\n    return this._isLocked\r\n  }\r\n\r\n  private set isLocked(value: boolean) {\r\n    if (this._isLocked !== value) {\r\n      this._isLocked = value\r\n      this.updateClassName()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if lenis is smooth scrolling\r\n   */\r\n  get isSmooth() {\r\n    return this.isScrolling === 'smooth'\r\n  }\r\n\r\n  /**\r\n   * The class name applied to the wrapper element\r\n   */\r\n  get className() {\r\n    let className = 'lenis'\r\n    if (this.isStopped) className += ' lenis-stopped'\r\n    if (this.isLocked) className += ' lenis-locked'\r\n    if (this.isScrolling) className += ' lenis-scrolling'\r\n    if (this.isScrolling === 'smooth') className += ' lenis-smooth'\r\n    return className\r\n  }\r\n\r\n  private updateClassName() {\r\n    this.cleanUpClassName()\r\n\r\n    this.rootElement.className =\r\n      `${this.rootElement.className} ${this.className}`.trim()\r\n  }\r\n\r\n  private cleanUpClassName() {\r\n    this.rootElement.className = this.rootElement.className\r\n      .replace(/lenis(-\\w+)?/g, '')\r\n      .trim()\r\n  }\r\n}\r\n", "'use client'\r\n\r\nimport Tempus from '@darkroom.engineering/tempus'\r\nimport Lenis, { type ScrollCallback } from 'lenis'\r\nimport {\r\n  createContext,\r\n  forwardRef,\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  useRef,\r\n  useState,\r\n} from 'react'\r\nimport { Store, useStore } from './store'\r\nimport type { LenisContextValue, LenisProps, LenisRef } from './types'\r\n\r\nexport const LenisContext = createContext<LenisContextValue | null>(null)\r\n\r\nconst rootLenisContextStore = new Store<LenisContextValue | null>(null)\r\n\r\n// Fall back to an empty object if both context and store are not available\r\nconst fallbackContext: Partial<LenisContextValue> = {}\r\n\r\n/**\r\n * Hook to access the Lenis instance and its methods\r\n *\r\n * @example <caption>Scroll callback</caption>\r\n *          useLenis((lenis) => {\r\n *            if (lenis.isScrolling) {\r\n *              console.log('Scrolling...')\r\n *            }\r\n *\r\n *            if (lenis.progress === 1) {\r\n *              console.log('At the end!')\r\n *            }\r\n *          })\r\n *\r\n * @example <caption>Scroll callback with dependencies</caption>\r\n *          useLenis((lenis) => {\r\n *            if (lenis.isScrolling) {\r\n *              console.log('Scrolling...', someDependency)\r\n *            }\r\n *          }, [someDependency])\r\n * @example <caption>Scroll callback with priority</caption>\r\n *          useLenis((lenis) => {\r\n *            if (lenis.isScrolling) {\r\n *              console.log('Scrolling...')\r\n *            }\r\n *          }, [], 1)\r\n * @example <caption>Instance access</caption>\r\n *          const lenis = useLenis()\r\n *\r\n *          handleClick() {\r\n *            lenis.scrollTo(100, {\r\n *              lerp: 0.1,\r\n *              duration: 1,\r\n *              easing: (t) => t,\r\n *              onComplete: () => {\r\n *                console.log('Complete!')\r\n *              }\r\n *            })\r\n *          }\r\n */\r\nexport function useLenis(\r\n  callback?: ScrollCallback,\r\n  deps: any[] = [],\r\n  priority = 0\r\n) {\r\n  // Try to get the lenis instance from the context first\r\n  const localContext = useContext(LenisContext)\r\n  // Fall back to the root store if the context is not available\r\n  const rootContext = useStore(rootLenisContextStore)\r\n  // Fall back to the fallback context if all else fails\r\n  const currentContext = localContext ?? rootContext ?? fallbackContext\r\n\r\n  const { lenis, addCallback, removeCallback } = currentContext\r\n\r\n  useEffect(() => {\r\n    if (!callback || !addCallback || !removeCallback || !lenis) return\r\n\r\n    addCallback(callback, priority)\r\n    callback(lenis)\r\n\r\n    return () => {\r\n      removeCallback(callback)\r\n    }\r\n  }, [lenis, addCallback, removeCallback, priority, ...deps])\r\n\r\n  return lenis\r\n}\r\n\r\n/**\r\n * React component to setup a Lenis instance\r\n */\r\nconst ReactLenis = forwardRef<LenisRef, LenisProps>(\r\n  (\r\n    {\r\n      children,\r\n      root = false,\r\n      options = {},\r\n      autoRaf = true,\r\n      rafPriority = 0,\r\n      className,\r\n      props,\r\n    }: LenisProps,\r\n    ref\r\n  ) => {\r\n    const wrapperRef = useRef<HTMLDivElement | null>(null)\r\n    const contentRef = useRef<HTMLDivElement | null>(null)\r\n\r\n    const [lenis, setLenis] = useState<Lenis | undefined>(undefined)\r\n\r\n    // Setup ref\r\n    useImperativeHandle(\r\n      ref,\r\n      () => ({\r\n        wrapper: wrapperRef.current,\r\n        content: contentRef.current,\r\n        lenis,\r\n      }),\r\n      [lenis]\r\n    )\r\n\r\n    // Setup lenis instance\r\n    useEffect(() => {\r\n      const lenis = new Lenis({\r\n        ...options,\r\n        ...(!root && {\r\n          wrapper: wrapperRef.current!,\r\n          content: contentRef.current!,\r\n        }),\r\n      })\r\n\r\n      setLenis(lenis)\r\n\r\n      return () => {\r\n        lenis.destroy()\r\n        setLenis(undefined)\r\n      }\r\n    }, [root, JSON.stringify(options)])\r\n\r\n    // Setup raf\r\n    useEffect(() => {\r\n      if (!lenis || !autoRaf) return\r\n\r\n      return Tempus.add((time: number) => lenis.raf(time), rafPriority)\r\n    }, [lenis, autoRaf, rafPriority])\r\n\r\n    // Handle callbacks\r\n    const callbacksRefs = useRef<\r\n      {\r\n        callback: ScrollCallback\r\n        priority: number\r\n      }[]\r\n    >([])\r\n\r\n    const addCallback: LenisContextValue['addCallback'] = useCallback(\r\n      (callback, priority) => {\r\n        callbacksRefs.current.push({ callback, priority })\r\n        callbacksRefs.current.sort((a, b) => a.priority - b.priority)\r\n      },\r\n      []\r\n    )\r\n\r\n    const removeCallback: LenisContextValue['removeCallback'] = useCallback(\r\n      (callback) => {\r\n        callbacksRefs.current = callbacksRefs.current.filter(\r\n          (cb) => cb.callback !== callback\r\n        )\r\n      },\r\n      []\r\n    )\r\n\r\n    // This makes sure to set the global context if the root is true\r\n    useEffect(() => {\r\n      if (root && lenis) {\r\n        rootLenisContextStore.set({ lenis, addCallback, removeCallback })\r\n\r\n        return () => rootLenisContextStore.set(null)\r\n      }\r\n    }, [root, lenis, addCallback, removeCallback])\r\n\r\n    // Setup callback listeners\r\n    useEffect(() => {\r\n      if (!lenis) return\r\n\r\n      const onScroll: ScrollCallback = (data) => {\r\n        for (let i = 0; i < callbacksRefs.current.length; i++) {\r\n          callbacksRefs.current[i].callback(data)\r\n        }\r\n      }\r\n\r\n      lenis.on('scroll', onScroll)\r\n\r\n      return () => {\r\n        lenis.off('scroll', onScroll)\r\n      }\r\n    }, [lenis])\r\n\r\n    return (\r\n      <LenisContext.Provider\r\n        value={{ lenis: lenis!, addCallback, removeCallback }}\r\n      >\r\n        {root ? (\r\n          children\r\n        ) : (\r\n          <div ref={wrapperRef} className={className} {...props}>\r\n            <div ref={contentRef}>{children}</div>\r\n          </div>\r\n        )}\r\n      </LenisContext.Provider>\r\n    )\r\n  }\r\n)\r\n\r\nexport * from './types'\r\nexport { ReactLenis as Lenis, ReactLenis }\r\nexport default ReactLenis\r\n", "import { useEffect, useState } from 'react'\r\n\r\ntype Listener<S> = (state: S) => void\r\n\r\nexport class Store<S> {\r\n  private listeners: Listener<S>[] = []\r\n\r\n  constructor(private state: S) {}\r\n\r\n  set(state: S) {\r\n    this.state = state\r\n\r\n    for (let listener of this.listeners) {\r\n      listener(this.state)\r\n    }\r\n  }\r\n\r\n  subscribe(listener: Listener<S>) {\r\n    this.listeners = [...this.listeners, listener]\r\n    return () => {\r\n      this.listeners = this.listeners.filter((l) => l !== listener)\r\n    }\r\n  }\r\n\r\n  get() {\r\n    return this.state\r\n  }\r\n}\r\n\r\nexport function useStore<S>(store: Store<S>) {\r\n  const [state, setState] = useState(store.get())\r\n\r\n  useEffect(() => {\r\n    return store.subscribe((state) => setState(state))\r\n  }, [store])\r\n\r\n  return state\r\n}\r\n"],
  "mappings": "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",
  "names": ["window", "constructor", "raf", "now", "requestAnimationFrame", "this", "deltaTime", "i", "callbacks", "length", "callback", "performance", "add", "priority", "push", "sort", "a", "b", "remove", "filter", "cb", "clamp", "min", "input", "max", "Math", "Animate", "constructor", "this", "isRunning", "value", "from", "to", "currentTime", "deltaTime", "completed", "duration", "easing", "linearProgress", "easedProgress", "lerp", "damp", "x", "y", "lambda", "t", "exp", "round", "stop", "_a", "onUpdate", "call", "onStart", "Dimensions", "wrapper", "content", "autoResize", "debounce", "debounceValue", "width", "height", "scrollHeight", "scrollWidth", "resize", "onWrapperResize", "onContentResize", "Window", "window", "innerWidth", "innerHeight", "clientWidth", "clientHeight", "debouncedResize", "callback", "delay", "timer", "args", "context", "clearTimeout", "setTimeout", "apply", "addEventListener", "wrapperResizeObserver", "ResizeObserver", "observe", "contentResizeObserver", "destroy", "disconnect", "_b", "removeEventListener", "limit", "Emitter", "events", "event", "callbacks", "i", "length", "cb", "push", "e", "filter", "LINE_HEIGHT", "listenerOptions", "passive", "VirtualScroll", "element", "options", "wheelMultiplier", "touchMultiplier", "touchStart", "lastDelta", "emitter", "onTouchStart", "clientX", "clientY", "targetTouches", "emit", "deltaX", "deltaY", "onTouchMove", "onTouchEnd", "onWheel", "deltaMode", "onWindowResize", "on", "Lenis", "document", "documentElement", "eventsTarget", "smoothWheel", "syncTouch", "syncTouchLerp", "touchInertiaMultiplier", "pow", "infinite", "orientation", "gestureOrientation", "prevent", "virtualScroll", "__experimental__naiveDimensions", "_isScrolling", "_isStopped", "_isLocked", "_preventNextNativeScrollEvent", "_resetVelocityTimeout", "time", "userData", "lastVelocity", "velocity", "direction", "animate", "onPointerDown", "button", "reset", "onVirtualScroll", "data", "ctrlKey", "isTouch", "type", "includes", "isWheel", "isTouching", "isStopped", "isLocked", "isClick", "isUnknownGesture", "composedPath", "slice", "indexOf", "rootElement", "find", "node", "HTMLElement", "hasAttribute", "_c", "l", "classList", "_d", "contains", "_e", "preventDefault", "isScrolling", "delta", "abs", "hasTouchInertia", "scrollTo", "targetScroll", "Object", "assign", "programmatic", "onNativeScroll", "lastScroll", "animatedScroll", "actualScroll", "sign", "lenisVersion", "body", "dimensions", "updateClassName", "cleanUpClassName", "off", "scroll", "isHorizontal", "scrollLeft", "scrollTop", "start", "advance", "target", "offset", "immediate", "lock", "onComplete", "force", "querySelector", "nodeType", "wrapperRect", "getBoundingClientRect", "left", "top", "rect", "setScroll", "preventNextNativeScrollEvent", "fromTo", "requestAnimationFrame", "modulo", "n", "d", "progress", "isSmooth", "className", "trim", "replace", "LenisContext", "createContext", "rootLenisContextStore", "Store", "state", "this", "listeners", "listener", "filter", "l", "get", "fallbackContext", "useLenis", "callback", "deps", "priority", "i", "localContext", "useContext", "rootContext", "useStore", "store", "setState", "useState", "useEffect", "subscribe", "currentContext", "_a", "lenis", "addCallback", "removeCallback", "ReactLenis", "forwardRef", "children", "root", "options", "autoRaf", "rafPriority", "className", "props", "ref", "wrapperRef", "useRef", "contentRef", "setLenis", "undefined", "useImperativeHandle", "wrapper", "current", "content", "Lenis", "Object", "assign", "destroy", "JSON", "stringify", "Tempus", "add", "time", "raf", "callbacksRefs", "useCallback", "push", "sort", "a", "b", "cb", "set", "onScroll", "data", "length", "on", "off", "_jsx", "Provider", "value"]
}
