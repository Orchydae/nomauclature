import {
  require_jsx_runtime
} from "./chunk-NRBATONI.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/lenis/dist/lenis-react.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);

// node_modules/@darkroom.engineering/tempus/dist/tempus.modern.mjs
var a = "undefined" != typeof window && new class {
  constructor() {
    this.raf = (a3) => {
      requestAnimationFrame(this.raf);
      const t2 = a3 - this.now;
      this.now = a3;
      for (let s2 = 0; s2 < this.callbacks.length; s2++) this.callbacks[s2].callback(a3, t2);
    }, this.callbacks = [], this.now = performance.now(), requestAnimationFrame(this.raf);
  }
  add(a3, t2 = 0) {
    return this.callbacks.push({ callback: a3, priority: t2 }), this.callbacks.sort((a4, t3) => a4.priority - t3.priority), () => this.remove(a3);
  }
  remove(a3) {
    this.callbacks = this.callbacks.filter(({ callback: t2 }) => a3 !== t2);
  }
}();

// node_modules/lenis/dist/lenis.mjs
function clamp(t2, i3, e) {
  return Math.max(t2, Math.min(i3, e));
}
var Animate = class {
  constructor() {
    this.isRunning = false, this.value = 0, this.from = 0, this.to = 0, this.currentTime = 0;
  }
  advance(t2) {
    var i3;
    if (!this.isRunning) return;
    let e = false;
    if (this.duration && this.easing) {
      this.currentTime += t2;
      const i4 = clamp(0, this.currentTime / this.duration, 1);
      e = i4 >= 1;
      const s2 = e ? 1 : this.easing(i4);
      this.value = this.from + (this.to - this.from) * s2;
    } else this.lerp ? (this.value = function damp(t3, i4, e2, s2) {
      return function lerp(t4, i5, e3) {
        return (1 - e3) * t4 + e3 * i5;
      }(t3, i4, 1 - Math.exp(-e2 * s2));
    }(this.value, this.to, 60 * this.lerp, t2), Math.round(this.value) === this.to && (this.value = this.to, e = true)) : (this.value = this.to, e = true);
    e && this.stop(), null === (i3 = this.onUpdate) || void 0 === i3 || i3.call(this, this.value, e);
  }
  stop() {
    this.isRunning = false;
  }
  fromTo(t2, i3, { lerp: e, duration: s2, easing: o2, onStart: n2, onUpdate: l2 }) {
    this.from = this.value = t2, this.to = i3, this.lerp = e, this.duration = s2, this.easing = o2, this.currentTime = 0, this.isRunning = true, null == n2 || n2(), this.onUpdate = l2;
  }
};
var Dimensions = class {
  constructor(t2, i3, { autoResize: e = true, debounce: s2 = 250 } = {}) {
    this.wrapper = t2, this.content = i3, this.width = 0, this.height = 0, this.scrollHeight = 0, this.scrollWidth = 0, this.resize = () => {
      this.onWrapperResize(), this.onContentResize();
    }, this.onWrapperResize = () => {
      this.wrapper instanceof Window ? (this.width = window.innerWidth, this.height = window.innerHeight) : (this.width = this.wrapper.clientWidth, this.height = this.wrapper.clientHeight);
    }, this.onContentResize = () => {
      this.wrapper instanceof Window ? (this.scrollHeight = this.content.scrollHeight, this.scrollWidth = this.content.scrollWidth) : (this.scrollHeight = this.wrapper.scrollHeight, this.scrollWidth = this.wrapper.scrollWidth);
    }, e && (this.debouncedResize = /* @__PURE__ */ function debounce(t3, i4) {
      let e2;
      return function(...s3) {
        let o2 = this;
        clearTimeout(e2), e2 = setTimeout(() => {
          e2 = void 0, t3.apply(o2, s3);
        }, i4);
      };
    }(this.resize, s2), this.wrapper instanceof Window ? window.addEventListener("resize", this.debouncedResize, false) : (this.wrapperResizeObserver = new ResizeObserver(this.debouncedResize), this.wrapperResizeObserver.observe(this.wrapper)), this.contentResizeObserver = new ResizeObserver(this.debouncedResize), this.contentResizeObserver.observe(this.content)), this.resize();
  }
  destroy() {
    var t2, i3;
    null === (t2 = this.wrapperResizeObserver) || void 0 === t2 || t2.disconnect(), null === (i3 = this.contentResizeObserver) || void 0 === i3 || i3.disconnect(), this.wrapper === window && this.debouncedResize && window.removeEventListener("resize", this.debouncedResize, false);
  }
  get limit() {
    return { x: this.scrollWidth - this.width, y: this.scrollHeight - this.height };
  }
};
var Emitter = class {
  constructor() {
    this.events = {};
  }
  emit(t2, ...i3) {
    var e;
    let s2 = this.events[t2] || [];
    for (let t3 = 0, o2 = s2.length; t3 < o2; t3++) null === (e = s2[t3]) || void 0 === e || e.call(s2, ...i3);
  }
  on(t2, i3) {
    var e;
    return (null === (e = this.events[t2]) || void 0 === e ? void 0 : e.push(i3)) || (this.events[t2] = [i3]), () => {
      var e2;
      this.events[t2] = null === (e2 = this.events[t2]) || void 0 === e2 ? void 0 : e2.filter((t3) => i3 !== t3);
    };
  }
  off(t2, i3) {
    var e;
    this.events[t2] = null === (e = this.events[t2]) || void 0 === e ? void 0 : e.filter((t3) => i3 !== t3);
  }
  destroy() {
    this.events = {};
  }
};
var t = 100 / 6;
var i = { passive: false };
var VirtualScroll = class {
  constructor(e, s2 = { wheelMultiplier: 1, touchMultiplier: 1 }) {
    this.element = e, this.options = s2, this.touchStart = { x: 0, y: 0 }, this.lastDelta = { x: 0, y: 0 }, this.window = { width: 0, height: 0 }, this.emitter = new Emitter(), this.onTouchStart = (t2) => {
      const { clientX: i3, clientY: e2 } = t2.targetTouches ? t2.targetTouches[0] : t2;
      this.touchStart.x = i3, this.touchStart.y = e2, this.lastDelta = { x: 0, y: 0 }, this.emitter.emit("scroll", { deltaX: 0, deltaY: 0, event: t2 });
    }, this.onTouchMove = (t2) => {
      const { clientX: i3, clientY: e2 } = t2.targetTouches ? t2.targetTouches[0] : t2, s3 = -(i3 - this.touchStart.x) * this.options.touchMultiplier, o2 = -(e2 - this.touchStart.y) * this.options.touchMultiplier;
      this.touchStart.x = i3, this.touchStart.y = e2, this.lastDelta = { x: s3, y: o2 }, this.emitter.emit("scroll", { deltaX: s3, deltaY: o2, event: t2 });
    }, this.onTouchEnd = (t2) => {
      this.emitter.emit("scroll", { deltaX: this.lastDelta.x, deltaY: this.lastDelta.y, event: t2 });
    }, this.onWheel = (i3) => {
      let { deltaX: e2, deltaY: s3, deltaMode: o2 } = i3;
      e2 *= 1 === o2 ? t : 2 === o2 ? this.window.width : 1, s3 *= 1 === o2 ? t : 2 === o2 ? this.window.height : 1, e2 *= this.options.wheelMultiplier, s3 *= this.options.wheelMultiplier, this.emitter.emit("scroll", { deltaX: e2, deltaY: s3, event: i3 });
    }, this.onWindowResize = () => {
      this.window = { width: window.innerWidth, height: window.innerHeight };
    }, window.addEventListener("resize", this.onWindowResize, false), this.onWindowResize(), this.element.addEventListener("wheel", this.onWheel, i), this.element.addEventListener("touchstart", this.onTouchStart, i), this.element.addEventListener("touchmove", this.onTouchMove, i), this.element.addEventListener("touchend", this.onTouchEnd, i);
  }
  on(t2, i3) {
    return this.emitter.on(t2, i3);
  }
  destroy() {
    this.emitter.destroy(), window.removeEventListener("resize", this.onWindowResize, false), this.element.removeEventListener("wheel", this.onWheel, i), this.element.removeEventListener("touchstart", this.onTouchStart, i), this.element.removeEventListener("touchmove", this.onTouchMove, i), this.element.removeEventListener("touchend", this.onTouchEnd, i);
  }
};
var Lenis = class {
  constructor({ wrapper: t2 = window, content: i3 = document.documentElement, eventsTarget: e = t2, smoothWheel: s2 = true, syncTouch: o2 = false, syncTouchLerp: n2 = 0.075, touchInertiaMultiplier: l2 = 35, duration: r2, easing: h = (t3) => Math.min(1, 1.001 - Math.pow(2, -10 * t3)), lerp: a3 = 0.1, infinite: c2 = false, orientation: u2 = "vertical", gestureOrientation: d2 = "vertical", touchMultiplier: p2 = 1, wheelMultiplier: m = 1, autoResize: v = true, prevent: g, virtualScroll: S, __experimental__naiveDimensions: w = false } = {}) {
    this._isScrolling = false, this._isStopped = false, this._isLocked = false, this._preventNextNativeScrollEvent = false, this._resetVelocityTimeout = null, this.time = 0, this.userData = {}, this.lastVelocity = 0, this.velocity = 0, this.direction = 0, this.animate = new Animate(), this.emitter = new Emitter(), this.onPointerDown = (t3) => {
      1 === t3.button && this.reset();
    }, this.onVirtualScroll = (t3) => {
      if ("function" == typeof this.options.virtualScroll && false === this.options.virtualScroll(t3)) return;
      const { deltaX: i4, deltaY: e2, event: s3 } = t3;
      if (this.emitter.emit("virtual-scroll", { deltaX: i4, deltaY: e2, event: s3 }), s3.ctrlKey) return;
      const o3 = s3.type.includes("touch"), n3 = s3.type.includes("wheel");
      this.isTouching = "touchstart" === s3.type || "touchmove" === s3.type;
      if (this.options.syncTouch && o3 && "touchstart" === s3.type && !this.isStopped && !this.isLocked) return void this.reset();
      const l3 = 0 === i4 && 0 === e2, r3 = "vertical" === this.options.gestureOrientation && 0 === e2 || "horizontal" === this.options.gestureOrientation && 0 === i4;
      if (l3 || r3) return;
      let h2 = s3.composedPath();
      h2 = h2.slice(0, h2.indexOf(this.rootElement));
      const a4 = this.options.prevent;
      if (h2.find((t4) => {
        var i5, e3, s4, l4, r4;
        return t4 instanceof HTMLElement && ("function" == typeof a4 && (null == a4 ? void 0 : a4(t4)) || (null === (i5 = t4.hasAttribute) || void 0 === i5 ? void 0 : i5.call(t4, "data-lenis-prevent")) || o3 && (null === (e3 = t4.hasAttribute) || void 0 === e3 ? void 0 : e3.call(t4, "data-lenis-prevent-touch")) || n3 && (null === (s4 = t4.hasAttribute) || void 0 === s4 ? void 0 : s4.call(t4, "data-lenis-prevent-wheel")) || (null === (l4 = t4.classList) || void 0 === l4 ? void 0 : l4.contains("lenis")) && !(null === (r4 = t4.classList) || void 0 === r4 ? void 0 : r4.contains("lenis-stopped")));
      })) return;
      if (this.isStopped || this.isLocked) return void s3.preventDefault();
      if (!(this.options.syncTouch && o3 || this.options.smoothWheel && n3)) return this.isScrolling = "native", void this.animate.stop();
      s3.preventDefault();
      let c3 = e2;
      "both" === this.options.gestureOrientation ? c3 = Math.abs(e2) > Math.abs(i4) ? e2 : i4 : "horizontal" === this.options.gestureOrientation && (c3 = i4);
      const u3 = o3 && this.options.syncTouch, d3 = o3 && "touchend" === s3.type && Math.abs(c3) > 5;
      d3 && (c3 = this.velocity * this.options.touchInertiaMultiplier), this.scrollTo(this.targetScroll + c3, Object.assign({ programmatic: false }, u3 ? { lerp: d3 ? this.options.syncTouchLerp : 1 } : { lerp: this.options.lerp, duration: this.options.duration, easing: this.options.easing }));
    }, this.onNativeScroll = () => {
      if (null !== this._resetVelocityTimeout && (clearTimeout(this._resetVelocityTimeout), this._resetVelocityTimeout = null), this._preventNextNativeScrollEvent) this._preventNextNativeScrollEvent = false;
      else if (false === this.isScrolling || "native" === this.isScrolling) {
        const t3 = this.animatedScroll;
        this.animatedScroll = this.targetScroll = this.actualScroll, this.lastVelocity = this.velocity, this.velocity = this.animatedScroll - t3, this.direction = Math.sign(this.animatedScroll - t3), this.isScrolling = "native", this.emit(), 0 !== this.velocity && (this._resetVelocityTimeout = setTimeout(() => {
          this.lastVelocity = this.velocity, this.velocity = 0, this.isScrolling = false, this.emit();
        }, 400));
      }
    }, window.lenisVersion = "1.1.13", t2 && t2 !== document.documentElement && t2 !== document.body || (t2 = window), this.options = { wrapper: t2, content: i3, eventsTarget: e, smoothWheel: s2, syncTouch: o2, syncTouchLerp: n2, touchInertiaMultiplier: l2, duration: r2, easing: h, lerp: a3, infinite: c2, gestureOrientation: d2, orientation: u2, touchMultiplier: p2, wheelMultiplier: m, autoResize: v, prevent: g, virtualScroll: S, __experimental__naiveDimensions: w }, this.dimensions = new Dimensions(t2, i3, { autoResize: v }), this.updateClassName(), this.targetScroll = this.animatedScroll = this.actualScroll, this.options.wrapper.addEventListener("scroll", this.onNativeScroll, false), this.options.wrapper.addEventListener("pointerdown", this.onPointerDown, false), this.virtualScroll = new VirtualScroll(e, { touchMultiplier: p2, wheelMultiplier: m }), this.virtualScroll.on("scroll", this.onVirtualScroll);
  }
  destroy() {
    this.emitter.destroy(), this.options.wrapper.removeEventListener("scroll", this.onNativeScroll, false), this.options.wrapper.removeEventListener("pointerdown", this.onPointerDown, false), this.virtualScroll.destroy(), this.dimensions.destroy(), this.cleanUpClassName();
  }
  on(t2, i3) {
    return this.emitter.on(t2, i3);
  }
  off(t2, i3) {
    return this.emitter.off(t2, i3);
  }
  setScroll(t2) {
    this.isHorizontal ? this.rootElement.scrollLeft = t2 : this.rootElement.scrollTop = t2;
  }
  resize() {
    this.dimensions.resize(), this.animatedScroll = this.targetScroll = this.actualScroll, this.emit();
  }
  emit() {
    this.emitter.emit("scroll", this);
  }
  reset() {
    this.isLocked = false, this.isScrolling = false, this.animatedScroll = this.targetScroll = this.actualScroll, this.lastVelocity = this.velocity = 0, this.animate.stop();
  }
  start() {
    this.isStopped && (this.isStopped = false, this.reset());
  }
  stop() {
    this.isStopped || (this.isStopped = true, this.animate.stop(), this.reset());
  }
  raf(t2) {
    const i3 = t2 - (this.time || t2);
    this.time = t2, this.animate.advance(1e-3 * i3);
  }
  scrollTo(t2, { offset: i3 = 0, immediate: e = false, lock: s2 = false, duration: o2 = this.options.duration, easing: n2 = this.options.easing, lerp: l2 = this.options.lerp, onStart: r2, onComplete: h, force: a3 = false, programmatic: c2 = true, userData: u2 } = {}) {
    if (!this.isStopped && !this.isLocked || a3) {
      if ("string" == typeof t2 && ["top", "left", "start"].includes(t2)) t2 = 0;
      else if ("string" == typeof t2 && ["bottom", "right", "end"].includes(t2)) t2 = this.limit;
      else {
        let e2;
        if ("string" == typeof t2 ? e2 = document.querySelector(t2) : t2 instanceof HTMLElement && (null == t2 ? void 0 : t2.nodeType) && (e2 = t2), e2) {
          if (this.options.wrapper !== window) {
            const t3 = this.rootElement.getBoundingClientRect();
            i3 -= this.isHorizontal ? t3.left : t3.top;
          }
          const s3 = e2.getBoundingClientRect();
          t2 = (this.isHorizontal ? s3.left : s3.top) + this.animatedScroll;
        }
      }
      if ("number" == typeof t2) {
        if (t2 += i3, t2 = Math.round(t2), this.options.infinite ? c2 && (this.targetScroll = this.animatedScroll = this.scroll) : t2 = clamp(0, t2, this.limit), t2 === this.targetScroll) return null == r2 || r2(this), void (null == h || h(this));
        if (this.userData = null != u2 ? u2 : {}, e) return this.animatedScroll = this.targetScroll = t2, this.setScroll(this.scroll), this.reset(), this.preventNextNativeScrollEvent(), this.emit(), null == h || h(this), void (this.userData = {});
        c2 || (this.targetScroll = t2), this.animate.fromTo(this.animatedScroll, t2, { duration: o2, easing: n2, lerp: l2, onStart: () => {
          s2 && (this.isLocked = true), this.isScrolling = "smooth", null == r2 || r2(this);
        }, onUpdate: (t3, i4) => {
          this.isScrolling = "smooth", this.lastVelocity = this.velocity, this.velocity = t3 - this.animatedScroll, this.direction = Math.sign(this.velocity), this.animatedScroll = t3, this.setScroll(this.scroll), c2 && (this.targetScroll = t3), i4 || this.emit(), i4 && (this.reset(), this.emit(), null == h || h(this), this.userData = {}, this.preventNextNativeScrollEvent());
        } });
      }
    }
  }
  preventNextNativeScrollEvent() {
    this._preventNextNativeScrollEvent = true, requestAnimationFrame(() => {
      this._preventNextNativeScrollEvent = false;
    });
  }
  get rootElement() {
    return this.options.wrapper === window ? document.documentElement : this.options.wrapper;
  }
  get limit() {
    return this.options.__experimental__naiveDimensions ? this.isHorizontal ? this.rootElement.scrollWidth - this.rootElement.clientWidth : this.rootElement.scrollHeight - this.rootElement.clientHeight : this.dimensions.limit[this.isHorizontal ? "x" : "y"];
  }
  get isHorizontal() {
    return "horizontal" === this.options.orientation;
  }
  get actualScroll() {
    return this.isHorizontal ? this.rootElement.scrollLeft : this.rootElement.scrollTop;
  }
  get scroll() {
    return this.options.infinite ? function modulo(t2, i3) {
      return (t2 % i3 + i3) % i3;
    }(this.animatedScroll, this.limit) : this.animatedScroll;
  }
  get progress() {
    return 0 === this.limit ? 1 : this.scroll / this.limit;
  }
  get isScrolling() {
    return this._isScrolling;
  }
  set isScrolling(t2) {
    this._isScrolling !== t2 && (this._isScrolling = t2, this.updateClassName());
  }
  get isStopped() {
    return this._isStopped;
  }
  set isStopped(t2) {
    this._isStopped !== t2 && (this._isStopped = t2, this.updateClassName());
  }
  get isLocked() {
    return this._isLocked;
  }
  set isLocked(t2) {
    this._isLocked !== t2 && (this._isLocked = t2, this.updateClassName());
  }
  get isSmooth() {
    return "smooth" === this.isScrolling;
  }
  get className() {
    let t2 = "lenis";
    return this.isStopped && (t2 += " lenis-stopped"), this.isLocked && (t2 += " lenis-locked"), this.isScrolling && (t2 += " lenis-scrolling"), "smooth" === this.isScrolling && (t2 += " lenis-smooth"), t2;
  }
  updateClassName() {
    this.cleanUpClassName(), this.rootElement.className = `${this.rootElement.className} ${this.className}`.trim();
  }
  cleanUpClassName() {
    this.rootElement.className = this.rootElement.className.replace(/lenis(-\w+)?/g, "").trim();
  }
};

// node_modules/lenis/dist/lenis-react.mjs
var import_react = __toESM(require_react(), 1);
var f = (0, import_react.createContext)(null);
var d = new class Store {
  constructor(r2) {
    this.state = r2, this.listeners = [];
  }
  set(r2) {
    this.state = r2;
    for (let r3 of this.listeners) r3(this.state);
  }
  subscribe(r2) {
    return this.listeners = [...this.listeners, r2], () => {
      this.listeners = this.listeners.filter((e) => e !== r2);
    };
  }
  get() {
    return this.state;
  }
}(null);
var p = {};
function useLenis(r2, e = [], t2 = 0) {
  var i3;
  const l2 = (0, import_react.useContext)(f), o2 = function useStore(r3) {
    const [e2, t3] = (0, import_react.useState)(r3.get());
    return (0, import_react.useEffect)(() => r3.subscribe((r4) => t3(r4)), [r3]), e2;
  }(d), c2 = null !== (i3 = null != l2 ? l2 : o2) && void 0 !== i3 ? i3 : p, { lenis: a3, addCallback: b2, removeCallback: h } = c2;
  return (0, import_react.useEffect)(() => {
    if (r2 && b2 && h && a3) return b2(r2, t2), r2(a3), () => {
      h(r2);
    };
  }, [a3, b2, h, t2, ...e]), a3;
}
var b = (0, import_react.forwardRef)(({ children: i3, root: l2 = false, options: u2 = {}, autoRaf: p2 = true, rafPriority: b2 = 0, className: h, props: m }, v) => {
  const k = (0, import_react.useRef)(null), g = (0, import_react.useRef)(null), [y, C] = (0, import_react.useState)(void 0);
  (0, import_react.useImperativeHandle)(v, () => ({ wrapper: k.current, content: g.current, lenis: y }), [y]), (0, import_react.useEffect)(() => {
    const r2 = new Lenis(Object.assign(Object.assign({}, u2), !l2 && { wrapper: k.current, content: g.current }));
    return C(r2), () => {
      r2.destroy(), C(void 0);
    };
  }, [l2, JSON.stringify(u2)]), (0, import_react.useEffect)(() => {
    if (y && p2) return a.add((r2) => y.raf(r2), b2);
  }, [y, p2, b2]);
  const j = (0, import_react.useRef)([]), w = (0, import_react.useCallback)((r2, e) => {
    j.current.push({ callback: r2, priority: e }), j.current.sort((r3, e2) => r3.priority - e2.priority);
  }, []), O = (0, import_react.useCallback)((r2) => {
    j.current = j.current.filter((e) => e.callback !== r2);
  }, []);
  return (0, import_react.useEffect)(() => {
    if (l2 && y) return d.set({ lenis: y, addCallback: w, removeCallback: O }), () => d.set(null);
  }, [l2, y, w, O]), (0, import_react.useEffect)(() => {
    if (!y) return;
    const onScroll = (r2) => {
      for (let e = 0; e < j.current.length; e++) j.current[e].callback(r2);
    };
    return y.on("scroll", onScroll), () => {
      y.off("scroll", onScroll);
    };
  }, [y]), (0, import_jsx_runtime.jsx)(f.Provider, { value: { lenis: y, addCallback: w, removeCallback: O }, children: l2 ? i3 : (0, import_jsx_runtime.jsx)("div", Object.assign({ ref: k, className: h }, m, { children: (0, import_jsx_runtime.jsx)("div", { ref: g, children: i3 }) })) });
});
export {
  b as Lenis,
  f as LenisContext,
  b as ReactLenis,
  b as default,
  useLenis
};
//# sourceMappingURL=lenis_react.js.map
